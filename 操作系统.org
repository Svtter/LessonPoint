#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+TITLE: 操作系统
知识提纲
* 操作系统概述
** 操作系统的地位，作用，发展历史，特征，功能
** 操作系统的分类及各类操作系统的特点
** 常用的操作系统
** TODO 习题
    - 计算机操作系统方便用户，管理和控制计算机软硬件资源的系统软件。
* 进程管理
** 进程的概念，特性
    进程是对正在运行的程序的一种抽象，是资源分配和独立运行的基本单位。
** 进程的状态及其转换（具有挂起状态）
    *运行状态* - *阻塞状态*（静止阻塞，活动阻塞） - *就绪状态*（活动就绪，静止就绪）
- 特别的，无法从阻塞状态直接转换成运行状态
** PCB的作用，内容，组织方式
**** 作用
    - 为了保存进程的各个状态，建立专用数据结构，即为PCB
**** 内容
    - 进程标识，位置信息，状态信息，进程的优先级，进程现场保护区，资源清单，队列指针等
**** 组织方式
     - 线性表
     - 链接表
     - 索引表
** [#B] 各种进程控制的原语（创建，终止，阻塞，唤醒，挂起）
    原语指由若干条指令组成，不可被打断。
**** 创建
      申请空间 - 查找PCB表 - 分配PCB空间 - 分配资源 - 信息填入PCB - PCB插入就绪队列
**** 终止
      找到PCB - 没有，进入异常处理 - 有，撤销PCB链中该进程的名字以及所有的子进程
**** 阻塞
      中断CPU - 将CPU状态存入PCB - 进程状态转变为阻塞 - 插入等待队列 - 执行调度程序
**** 唤醒
      唤醒条件满足 - PCB状态设置就绪，脱离阻塞队列 - 插入就绪队列
** 线程的概念，进程与线程的联系与区别
**** 概念
    线程是进程中的一个实体，是被系统独立调度和分配的基本单位
**** 联系区别
***** 调度
      传统操作系统中，拥有资源的基本单位和独立调度的基本单位都是进程，而在引入线程的操作系统中，则把线程
作为调度和分配的基本单位，而把进程作为拥有资源的基本单位，使传统进程的两个属性分开
***** 并发性
      不仅进程之间可以并发执行，一个进程的多个线程也可以并发执行
***** 拥有资源
      线程不拥有系统资源，但可以访问隶属进程的其他资源
***** 系统开销

** 进程同步的概念
    异步环境下并发执行的进程：
**** 同步
      因直接制约而需要相互等待，相互合作，以达到各进程按相互协调的速度执行的过程，成为进程的同步
**** 互斥
      因间接制约而导致交替执行的过程称为进程的互斥
** 临界资源，临界区的概念
    某段时间内只能允许一个进程使用的资源称为临界资源，必须互斥执行的程序段称为某临界资源的临界区
    - 进入区
      - 临界区
    - 退出区
** [#B] 同步机制原则
    - 空闲让进
    - 忙则等待
    - 有限等待
    - 让权等待（不占用CPU资源），忙等待则占用CPU资源
** 同步与互斥的各种方法（软件，硬件，信号量（集））
**** 硬件方式
        - 中断禁用
        - 专用机器指令
**** 软件方式
        - Dekker算法，Peterson算法 无法实现让权等待
**** 信号量, P/V操作

** [#B] 经典同步问题
**** 生产者消费者问题
***** 生产者
1. 有无空位
2. 锁资源
3. 释放资源
4. 增加可使用资源
***** 消费者
1. 有无可使用资源
2. 锁资源
3. 释放资源
4. 增加空位
**** 读者写者问题
***** 读者
1. 锁资源
2. 判断读者数量，以此判断是否锁写信号
3. 释放锁
***** 写者
1. 要求写信号
2. 写资源
3. 释放写信号
**** 哲学家就餐问题
- 左右两边同时可以拿叉子的时候，才拿
- 奇数号（1,3）的哲学家先拿左边的叉子，偶数号（0,2,4）的科学家先拿右边的叉子。
** 调度方式（抢占，非抢占式），类型（高，中，低）
*** 方式
    抢占方式即新来的优先级高，则立即执行，对于原本的进程，保存其状态
*** 类型
**** 高级调度，作业调度
**** 中级调度，暂时不能运行的进程挂起，释放内存资源，并调到外存等待
**** 低级调度，即进程调度
** [#A] 各种调度算法（FCFS，SJF，RR，优先权法，多级反馈轮转）
**** FCFS 先来先服务
**** RR 时间片轮转
     - 分配时间片段给任何一个进程
**** 短进程优先
     - 时间短的进程优先执行
**** 高响应比优先
- 公式： 优先权 = （等待时间 + 要求服务时间） / 要求服务时间
- 需要计算响应比，会增加系统开销
  
**** 优先级法
     进程的类型，运行时间，作业的优先级。
**** 多级反馈队列调度算法
1. 放在不同等级的队列上进行执行
2. 在每一个队列上执行时间片轮转
** 死锁的概念，产生原因，必要条件，处理方法
**** 概念
     某个进程提出资源申请的时候，有关进程无法在外力的协助下，永远分配不到必需的资源而无法继续运行。
**** 产生原因
     1. 系统提供的资源不能满足每个进程的使用需求
     2. 在多道程序运行时，进程推进顺序不合法。
**** 必要条件
     1. 互斥条件
     2. 不剥夺条件
     3. 请求且保持条件
     4. 环路等待条件
        
** [#B] 银行家算法，死锁定理
**** 死锁定理
     当且仅当系统资源分配图是不可完全简化时，系统中有死锁。
     - 特别的，可以完全简化的时候，系统成功结束，没有简化出来的进程就是参与死锁的进程
**** 银行家算法
***** 安全状态
      安全状态是指分配的资源，满足每个进程的资源的最大需求，则每个进程顺利完成。
***** 简单理解
      简单理解为：进程执行前，判断系统是否有足够的进程分配给该进程使得该进程能够成功执行完毕
** TODO 习题
   
* 存储器管理
** [#B] 连续分配，动态分配算法，回收算法
*** 连续存储管理
    依次分配内存即可
*** 动态分配算法
**** 首次适应算法
     取第一个满足大小的空间
**** 最佳适应算法
     取最接近的空间
**** 最差适应算法
     取最不接近的空间（远大于所需量的空间）
*** 回收算法
    回收以后，指针如何移动的问题。书上没有，参考相关图
    
** 地址重定位的概念，紧凑
*** 概念
   把用户程序装入内存时，对有关指令的逻辑地址部分的修改称为地址重地位。
*** 紧凑
    经过一段时间的使用之后，内存中存在大量的碎片，于是需要紧凑处理。移动各用户分区中的程序，使他们集中于内存的一端，
使碎片集中于另一端，从而将空闲的碎片连成一个较大的分区，供需求作业使用，为此，必须采用动态重定位技术。
** [#B] 页式，段式，段页式管理方式，数据结构，地址变换过程
*** 分页式
**** 概念
     通过查页表补全块号，构成实际地址
**** 分配与回收
     位图法，链表法
**** 地址重定位
     *页内地址的长度由页大小决定*, 逻辑地址由硬件分成的两部分页号p和页内地址w。例如：页大小1KB，则逻辑地址的低10位（$2^10 = 1KB$）为页内地址
     #+CAPTION: 逻辑地址
     |页号p(6位)|页内地址w（10位）|
**** 具体过程
*** 段式
**** 概念
     以段为基本单位分配内存，每一段必须分配连续的内存空间，单各段之间不要求连续。
     #+CAPTION:段
     |段号S| 段内位移W|
**** 地址重定位
     检查段号，查段表，得出内存初始地址，与段内位移相加，得出物理地址
*** 区别
    1. 页是信息的物理单位，段是信息的逻辑单位。页减少外部碎片。
    2. 分页式存储管理的作业地址空间是一维的，分段是二维的。
    3. 页的大小固定，段的长度不定。
    4. 分页的优点体现在内存空间的管理上，分段体现在地址空间的管理上
*** 段页式
**** 管理方式
     1. *先分段* 作业地址空间进行段式管理
     2. *后分页* 每段内在分成若干大小固定的页
     3. 物理块大小
     4. 分为三个部分
        #+CAPTION:段页式
        |段号(s)|段内页号(p)|页内位移(d)|
** 可重入码的概念
   也称纯代码，是一种允许多个进程同时访问的代码（函数式编程）
** [#B] 虚存的概念，虚存的实现方式
*** 概念
    把内存与外存统一起来，形成一个存储器。
*** 实现方式
    请求页式存储管理
*** 流程
    1. 该页在主存吗？
    2. 有空白的存储块吗？
    3. 被置换页修改过吗？
** [#B] 各种页面置换算法及实现方式（FIFO，LRU，CLOCK）
*** OPT 最优算法
*** FIFO 先进先出算法
    最先淘汰那些驻留在内存时间最长的页面。
*** LRU 最近最久未使用算法
    一直未被使用的页面最先淘汰
*** CLOCK 时钟算法
    *判断页面的R位* 如果R位为0，置换页面；如果R位为1，清除R位，前移指针
** 工作集的概念
   一个进程当前正在使用的页面的集合
** 内部碎片（页式），外部碎片（段式）
** TODO 习题
    
* 文件系统
** 文件的概念
   存储在外部存储介质上的，具有符号名的一组相关信息的集合
** 文件的逻辑结构，物理结构，存取方法
*** 逻辑结构
**** 记录式文件
     记录式文件在逻辑上总是被看成一组顺序的记录集合，是一种有结构的文件组织，又分成定长记录文件和变长记录文件
**** 流式文件
     流式文件又称为无结构文件，文件内部不划分记录，文件内部是由一组相关信息组合成的有序字符流，这种文件的长度直接按字节计算
*** 物理结构
**** 顺序文件
***** 概念
     把一个逻辑上连续的文件存放在连续编号的物理块中。
***** 缺点
      - 建立时就要确定其长度
      - 不便于文件的动态扩充
      - 可能出现外部碎片
**** 链接文件
***** 概念
      逻辑上连续的文件，分散地存放在不同的物理块中。
***** 特点
      1. 仅适于对信息的顺序访问，不利于对文件的随机存取
      2. 每个物理块上增加了一个连接字，为信息管理添加了麻烦
**** 索引文件
***** 概念
      系统为每个文件建立一个索引表，其中的表项指出该文件的各个物理块号。
***** 特点
      具有多种优点，但是需要内存来提高速度
**** 多级索引文件
     盘块号指向盘块号，从而扩大文件索引范围
*** 存取方法
**** 顺序存取方式
     按照逻辑顺序一次读取文件内容
**** 随机存取方式
     根据需要存取文件中的任何块和记录，先对文件进行选点（seek），到达指令位置再开始读写。
** 文件控制块，索引节点，树型目录结构
*** 文件控制块
    文件的文件目录项又称为文件控制块。（FCB）
**** 有关文件存取控制信息
**** 文件结构信息
**** 文件使用信息
**** 文件管理信息
*** 索引节点
**** 概念
     为了减少检索文件访问的物理块数，UNIX文件系统把文件目录项中的文件名和其他管理信息分开，后者单独组成定长的数据结构， 
     称为*索引节点*，也称i节点。文件目录项组成的目录文件与普通文件一样对待，存储在文件存储器中。 
**** i节点表
     文件存储器上的每一个文件，都有一个外存文件控制块（又称外存索引节点）i节点与之对应，这些i节点被集中存放在文件存储器的i节点区。
     在使用的时候，内存会针对其建立一个内存i节点表（活动文件控制块或者活动i节点表）。
**** 使用i节点表的流程
     使用一个文件，如果在活动i节点表中找不到其对应的i节点时，就申请一个内存i节点，把外存i节点的内容复制到内存i节点中，随之就使用
     这个内存i节点来控制文件的读写。通常，最后一个用户关闭此文件后，内存i节点的内容被写到外存i节点中，然后，释放内存i节点。
*** 树型目录结构
    1. 方便用户查找文件，又可以把不同类型和用途的文件分类
    2. 允许文件重名
    3. 利用树型结构关系，可以更方便的制定保护文件的存取权限，有利于文件的保护
    - 不能直接支持文件或目录的共享
** 建立目录的过程，目录查询技术
*** 建立目录的过程
    建立文件控制块FCB，标识目录文件，赋予目录文件信息，写入磁盘
*** 目录查询技术
**** 线性检索法
     在单级目录中，利用用户提供的文件名，用顺序查找法从文件目录表中找到指名文件的目录项
**** Hash方法
     windows中的建立索引
** 文件共享与保护措施
*** 文件共享
*** 保护措施
**** 口令
**** 加密
**** 访问控制
** 文件的打开过程，打开的作用，读写过程
*** 打开过程
    - 在目录上寻找该文件
    - 活动i节点表增加该文件，（为该文件建立内存，从磁盘读入）
    - PCB获取inode
*** 打开的作用
    减少磁盘I/O，加快运行速度
*** 读写过程
    读写都在内存中进行，通过inode确认文件（一个文件有唯一的一个inode），在最后一个用户完成操作后，写入磁盘
** 外存分配方式（连续式，链接式，索引式）
*** 连续式
    每一个文件占据了一个完整且连续的磁盘区域，但是会产生碎片
*** 链接式
    没有外部碎片，但是磁盘读写速度较低，需要来回移动磁头寻找磁道，必须为指针分配空间
*** 索引式
    每个文件都有一个索引块。
*** 组合空间分配
    一般盘块号为4byte，盘块大小为1K，由此计算出最多存放256个盘块号。
** 文件存储空间管理（表，链，位示图，成组链接）
*** 空闲表
    系统为外存上的所有空闲区建立一张空闲表，分配方法与内存的动态分配相似
*** 空闲链表
    空闲表块链和区链
*** 位示图法
*** 成组链接法
    1. 设置空闲盘块号栈
    2. 文件区中的所有空闲盘块
** 改善文件系统性能的方法
*** 文件缓存
*** 提前读取
*** 减少磁臂移动
** 文件系统应该具备的主要功能
   1. 对文件存储器空间进行组织和分配
   2. 负责文件的存储并对存入的文件进行保护和检索的系统
   3. *具体* 为用户建立文件，存入，读出文件，控制文件存取，撤销文件等。
** TODO 习题 
* 设备管理
  依据习题进行筛选
** I/O控制方式（程序，中断，直接存储器存取，通道）
*** 程序
    不再使用
*** 中断驱动
*** DMA
*** 通道
** 输入输出硬件组织
*** I/O设备
*** 设备控制器
**** 组成
     单总线模型或者通道模型
**** 功能
     1. 接收和识别命令
     2. 实现CPU与控制器，控制器与设备间的数据交换
     3. 随时让CPU了解设备状态
     4. 识别设备地址
*** I/O通道
*** 总线系统
** [#B] 输入输出软件组织及各层次的处理过程
*** 中断处理程序
    1. 向I/O控制器发出命令  CPU > I/O
    2. 读I/O控制器状态      中断 I/O > CPU
    3. 检查状态
    4. 从I/O控制器中输入字  I/O > CPU
    5. 向存储器中写字       CPU > 内存
*** 设备驱动程序
    设备驱动程序是指驱动物理设备和DMA控制器 或 I/O控制 等直接进行I/O操作的程序的集合
    1. CPU > DMA
    2. DMA > CPU
    3. DMA在此过程中，将数据直接送入内存
*** 设备独立性软件
*** 用户层的I/O软件
** 缓冲区的管理方式
*** 单缓冲和双缓冲
*** 循环缓冲
*** 缓冲池
** 设备分配流程
*** 设备分配中的数据结构
**** 设备控制表
**** 控制器控制表
**** 通道控制表
**** 系统设备表
*** 设备分配时应考虑的因素
*** 独占设备的分配程序
** SPOOLing技术
*** 概念
    SPOOLing技术，是在多道程序设计中将一台独占设备改造为共享设备的一种行之有效的技术。
*** 特点
    1. 提高了I/O速度
    2. 将独占设备改造为共享设备
    3. 实现了虚拟设备功能
** [#B] 设备独立性(无关性)及实现
   用户编写的应用程序独立于具体使用的物理设备，即使设备更换了，应用程序也不用改变。
** [#B] 磁盘存储器管理
*** 磁盘性能
*** 磁盘调度
**** 先来先服务
**** 最短寻道时间优先
     要求访问的磁道，与当前磁头所在的磁道距离最近，以使每次的寻道时间最短。
**** 扫描算法
     优先考虑磁头移动方向。既是在磁道之外，又是最近的（好像电梯一样）
**** 循环扫描算法
     磁头移动到最外的磁道并访问后，立即返回到最里的欲访问的磁道，即将最小磁道号紧接着最大磁道号构成循环
* 安全与保护
** 口令的身份认证
   口令保护容易理解，也容易实现。
    - 口令的选择策略，内部存储，有效期和限制登录尝试次数等方面加强口令机制的安全
** 访问控制技术
*** 访问控制矩阵（访问表）
*** 访问权限表
*** 保护域
** 没有绝对安全的系统
* Task
** TODO 试卷的完成
** TODO 页面置换算法
** TODO 磁盘调度算法
** TODO 相应的题目
   